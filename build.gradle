group 'me.avo'
version '1.0'

buildscript {
    ext {
        kotlin_version = '1.2.51'
        ktor_version = '0.9.3'
        junit_version = '5.2.0'
    }

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
    }
}

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: "com.github.ben-manes.versions"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'conduit',
                'Implementation-Version': version,
                'Main-Class': 'me.avo.realworld.kotlin.ktor'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "http://dl.bintray.com/kotlin/exposed" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile group: "io.ktor", name: "ktor-server-core", version: ktor_version
    compile group: "io.ktor", name: "ktor-server-cio", version: ktor_version
    compile "io.ktor:ktor-auth-jwt:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"

    compile group: "org.mindrot", name: "jbcrypt", version: "0.4"
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile group: "org.slf4j", name: "slf4j-simple", version: "1.7.25"
    compile 'org.jetbrains.exposed:exposed:0.10.3'
    compile group: 'com.h2database', name: 'h2', version: '1.4.197'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testCompile group: 'org.amshove.kluent', name: 'kluent', version: '1.39'
    testCompile "io.ktor:ktor-server-test-host:$ktor_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"

}

test {
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter'
    }

    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
        events "failed"
    }

    //systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'

    failFast = false
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
tasks.test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/*Test*.*'
    ]
    // generated classes
    afterEvaluate {
        classDirectories = project.files(classDirectories.files.collect {
            fileTree(dir: it, excludes: excludes)
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
